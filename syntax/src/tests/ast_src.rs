//! Defines input for code generation process.

pub(crate) struct KindsSrc<'a> {
    pub(crate) punct: &'a [(&'a str, &'a str)],
    pub(crate) keywords: &'a [&'a str],
    pub(crate) contextual_keywords: &'a [&'a str],
    pub(crate) literals: &'a [&'a str],
    pub(crate) tokens: &'a [&'a str],
    pub(crate) nodes: &'a [&'a str],
}

pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {
    punct: &[
        (";", "SEMICOLON"),
        (":", "COLON"),
        (",", "COMMA"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("{", "L_CURLY"),
        ("}", "R_CURLY"),
        ("[", "L_BRACK"),
        ("]", "R_BRACK"),
        (".", "DOT"),
        ("!", "BANG"),
        ("?", "QUESTION"),
        ("=", "EQ"),
        ("==", "EQ2"),
        ("!=", "NEQ"),
        ("+", "PLUS"),
        ("++", "PLUSPLUS"),
        ("+=", "PLUSEQ"),
        ("*", "STAR"),
        ("**", "STARSTAR"),
        ("*=", "STAREQ"),
        ("/", "SLASH"),
        ("/=", "SLASHEQ"),
        ("-", "MINUS"),
        ("--", "MINUSMINUS"),
        ("-=", "MINUSEQ"),
        ("&", "AMP"),
        ("&&", "AMPAMP"),
        ("&=", "AMPEQ"),
        ("|", "PIPE"),
        ("||", "PIPEPIPE"),
        ("|=", "PIPEEQ"),
        ("%", "PERCENT"),
        ("%=", "PERCENTEQ"),
        ("^", "CARET"),
        ("^=", "CARETEQ"),
        ("~", "TILDE"),
        (">", "GT"),
        (">=", "GEQ"),
        (">>", "RSHIFT"),
        (">>>", "RSHIFTZERO"),
        (">>=", "RSHIFTEQ"),
        (">>>=", "RSHIFTZEROEQ"),
        ("<", "LT"),
        ("<=", "LEQ"),
        ("<<", "LSHIFT"),
        ("<<=", "LSHIFTEQ"),
        ("=>", "FAT_ARROW"),
        ("->", "THIN_ARROW"),
    ],
    keywords: &[
        "pragma",
        "import",
        "using",
        "contract",
        "abstract",
        "interface",
        "library",
        "function",
        "constant",
        "struct",
        "enum",
        "event",
        "public",
        "private",
        "internal",
        "external",
        "virtual",
        "modifier",
        "pure",
        "view",
        "returns",
        "as",
        "new",
        "delete",
        "storage",
        "calldata",
        "memory",
        "mapping",
        "is",
        "constructor",
        "if",
        "else",
        "for",
        "while",
        "do",
        "continue",
        "break",
        "try",
        "return",
        "emit",
        "assembly",
        "anonymous",
        "indexed",
        "receive",
        "fallback",
        "immutable",
        "const",
        "override",
        "catch",
        "wei",
        "gwei",
        "ether",
        "seconds",
        "minutes",
        "hours",
        "days",
        "weeks",
        "years",
        "true",
        "false",
    ],
    contextual_keywords: &[
        "from",
        "error",
        "revert",
        "global",
        "type",
        "address",
        "unchecked",
        "payable",
    ],
    literals: &[
        "STRING_LITERAL",
        "HEX_STRING_LITERAL",
        "DECIMAL_NUMBER_LITERAL",
        "HEX_NUMBER_LITERAL",
        "BOOL_LITERAL",
    ],
    tokens: &[
        "STRING",
        "HEX_STRING",
        "DECIMAL_NUMBER",
        "HEX_NUMBER",
        "ERROR",
        "IDENT",
        "ELEMENTARY_TYPE_IDENT",
        "WHITESPACE",
        "COMMENT",
        "PRAGMA_TOKEN",
        "USER_DEFINEABLE_OPERATOR",
    ],
    nodes: &[
        "UNIT_SOURCE",
        "ITEM",
        "NAME",
        "NAME_REF",
        "SYMBOL",
        "PATH",
        "PRAGMA",
        "PRAGMA_DATA",
        "USING",
        "USING_ALIASES",
        "USING_TARGET",
        "USING_BLOCK",
        "USING_ITEM",
        "USING_ALIAS",
        "VISIBILITY",
        "STATE_MUTABILITY",
        "IMPORT",
        "IMPORT_ITEM",
        "IMPORT_PATH",
        "IMPORT_SYMBOLS",
        "IDENT_PATH",
        "DATA_LOCATION",
        "LITERAL",
        "CALL_OPTIONS",
        "CALL_OPTION",
        "CALL_ARGUMENT_LIST",
        "CALL_ARGUMENTS",
        "NAMED_CALL_ARGUMENTS",
        "NAMED_CALL_ARGUMENT",
        "ARGUMENT_LIST",
        "PARAMETER_LIST",
        "RETURNS",
        "SYMBOL_ALIASES",
        "SYMBOL_ALIAS",
        "INTERFACE",
        "LIBRARY",
        "CONTRACT",
        "CONTRACT_ITEM",
        "INHERITANCE_SPECIFIERS",
        "INHERITANCE_SPECIFIER",
        "MODIFIER_DEFINITION",
        "MODIFIER_INVOCATION",
        "BLOCK",
        "UNCHECKED_BLOCK",
        "VARIABLE_DECLARATION",
        "VARIABLE_DECLARATION_TUPLE",
        "EVENT_DEFINITION",
        "EVENT_PARAMETERS",
        "EVENT_PARAMETER",
        "ERROR_DEFINITION",
        "ERROR_PARAMETERS",
        "ERROR_PARAMETER",
        "OVERRIDE_SPECIFIER",
        "FUNCTION_ATTRIBUTE",
        "FUNCTION_MODIFIER",
        "MODIFIER_ATTRIBUTE",
        "STATE_VARIABLE_ATTRIBUTE",
        "CONSTRUCTOR_DEFINITION",
        "FUNCTION_DEFINITION",
        "NAMED_FUNCTION_DEFINITION",
        "FALLBACK_FUNCTION_DEFINITION",
        "RECEIVE_FUNCTION_DEFINITION",
        "INHERITANCE",
        "STRUCT_DEFINITION",
        "STRUCT_MEMBER",
        "ENUM_DEFINITION",
        "ENUM_MEMBER",
        "USER_DEFINED_VALUE_TYPE_DEFINITION",
        "STATE_VARIABLE_DECLARATION",
        "SUB_DENOMINATOR",
        "YUL_ASSEMBLY",
        "CATCH_CLAUSE",
        "VARIABLE_TUPLE_DECLARATION",
        "VARIABLE_TUPLE_ELEMENT",
        "ASSEMBLY_FLAG",
        // types
        "ELEMENTARY_TYPE",
        "ARRAY_TYPE",
        "FUNCTION_TYPE",
        "MAPPING_TYPE",
        "MAPPING_KEY_TYPE",
        "IDENT_PATH_TYPE",
        // stmts
        "IF_STMT",
        "FOR_STMT",
        "WHILE_STMT",
        "DO_WHILE_STMT",
        "CONTINUE_STMT",
        "BREAK_STMT",
        "TRY_STMT",
        "RETURN_STMT",
        "EMIT_STMT",
        "REVERT_STMT",
        "ASSEMBLY_STMT",
        "EXPR_STMT",
        "VARIABLE_DECLARATION_STMT",
        // exprs
        "CALL_EXPR",
        "BINARY_EXPR",
        "INDEX_EXPR",
        "SLICE_EXPR",
        "MEMBER_ACCESS_EXPR",
        "CALL_OPTIONS_EXPR",
        "IDENT_EXPR",
        "LITERAL_EXPR",
        "NEW_EXPR",
        "TYPE_EXPR",
        "TUPLE_EXPR",
        "INLINE_ARRAY_EXPR",
        "PREFIX_EXPR",
        "POSTFIX_EXPR",
        "INFIX_EXPR",
        "TERNARY_EXPR",
        "NUMBER_LITERAL_EXPR",
        "MAPPING_KEY",
        "MAPPING_VALUE",
    ],
};

#[derive(Default, Debug)]
pub(crate) struct AstSrc {
    pub(crate) tokens: Vec<String>,
    pub(crate) nodes: Vec<AstNodeSrc>,
    pub(crate) enums: Vec<AstEnumSrc>,
}

#[derive(Debug)]
pub(crate) struct AstNodeSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) fields: Vec<Field>,
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Field {
    Token { name: String, cardinality: Cardinality },
    Node { name: String, ty: String, cardinality: Cardinality },
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Cardinality {
    Optional,
    Many,
}

#[derive(Debug)]
pub(crate) struct AstEnumSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) variants: Vec<String>,
}
